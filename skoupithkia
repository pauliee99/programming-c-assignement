EROTISIS 

*pos kamno tin lista na eshi megethos oso oi mathites
*mexri pio simio tha ftani i max student
*stin add sudent wtf pos to kamno me list je oi me array

-----------------------------------------------------------------------------------------------------

POINTERS

int main()                           |
{                                    |
    int x, *p;                       | 
    p = &x;                          | 
    *p=0;                            | 
    printf ( "x is %d\n" , x ) ;     |        x is 0
    printf ( "*p is %d\n" , *p);     |        *p is 0 
                                     |
    *p += 1;                         |
    printf ( "x is %d\n" , x ) ;     |        x is 1             
                                     | 
    (*p)++;                          |
    printf ( "x is %d\n" , x ) ;     |        x is 2
    return 0;                        |
}                                    |

*Κλήση Συναρτήσεων

Κάθε φορά που καλείται μια συνάρτηση προστίθεται
στην κορυφή της στοίβας μια εγγραφή που περιέχει:

• τις τοπικές μεταβλητές της συνάρτησης
• την διεύθυνση επιστροφής
• τις παραμέτρους της συνάρτησης

Μόλις τελειώσει η εκτέλεση της συνάρτησης
αφαιρείται η τελευταία εγγραφή, και άρα
καταστρέφονται όλες οι τοπικές μεταβλητές και
παράμετροι.
Ο κώδικας δημιουργίας και καταστροφής των
εγγραφών αυτών παράγεται από τον μεταγλωττιστή
και προστίθεται σε κάθε σημείο του προγράμματος
που γίνεται κλήση συνάρτησης.



void increase ( int * x )     |
{                             |                                            otan exoume stin sinartisi
    (*x)++;                   |                                            ptr otan tin akome dinoume 
}                             |                                            &(addressof).
int main ( )                  | 
{                             |
    int a = 1 ;               | 
    increase(&a ) ;           |
    printf ( "%d\n" , a ) ;   |   2
    return 0 ;                |
}                             |





















MALAKIES GIA TIN LOAD

list studlist = list_create();

    fseek(filest,0, SEEK_END);
    fsize = ftell(filest);
    plithos = fsize/sizeof(student);

    fclose(filest);

    return studlist;



MALAKIES GIA TIN ADD student

 node currnode = l->head; //tail
    int index = findStudent(id,l->head);
    if (index != -1){
        printf("student already exists\n");
        return -1; //am not sure for the -1
    }
    else {
        while (l->size == 0){
		    node currnode = l->head->next;
            st.id = currnode->data.id;
		    st.name = currnode->data.name;
	    }
    }


    MALAKIES GIA TIN SAVE

    /* 
    for (int i=0; i<=EOF; i++){
        tmp.id = currnode->id;
        tmp.name = currnode->name;
        currnode = currnode->next;
        fwrite(&tmp, sizeof(student), 1, filest);
    }*/